Builder {
    client:
     Client_PG {
       config:
        { client: 'pg',
          version: '7.6',
          connection:
           [Object: null prototype] {
             port: '5432',
             host: 'ec2-54-225-110-152.compute-1.amazonaws.com',
             database: 'di39kj69494ja',
             user: 'zikfbylxpnuaba',
             password:
              '7c15da1343fd268b9bd36fa27530f98da699c265acd015b9b1495415bd18919d' },
          ssl: true },
       logger:
        Logger {
          _debug: undefined,
          _warn: undefined,
          _error: undefined,
          _deprecate: undefined },
       version: '7.6',
       connectionSettings:
        { port: '5432',
          host: 'ec2-54-225-110-152.compute-1.amazonaws.com',
          database: 'di39kj69494ja',
          user: 'zikfbylxpnuaba',
          password:
           '7c15da1343fd268b9bd36fa27530f98da699c265acd015b9b1495415bd18919d' },
       driver:
        PG {
          defaults:
           { host: 'localhost',
             user: 'rain_will',
             database: 'rain_will',
             password: null,
             connectionString: undefined,
             port: 5432,
             rows: 0,
             binary: false,
             max: 10,
             idleTimeoutMillis: 30000,
             client_encoding: '',
             ssl: false,
             application_name: undefined,
             fallback_application_name: undefined,
             parseInputDatesAsUTC: false,
             statement_timeout: false,
             parseInt8: [Setter] },
          Client: { [Function: Client] Query: [Function: Query] },
          Query: [Function: Query],
          Pool: [Function: BoundPool],
          _pools: [],
          Connection: [Function: Connection],
          types:
           { getTypeParser: [Function: getTypeParser],
             setTypeParser: [Function: setTypeParser],
             arrayParser: { create: [Function: create] } },
          native: [Getter] },
       pool:
        Pool {
          creator: [Function: create],
          destroyer: [Function: destroy],
          validate: [Function: validate],
          log: [Function],
          acquireTimeoutMillis: 60000,
          createTimeoutMillis: 30000,
          idleTimeoutMillis: 30000,
          reapIntervalMillis: 1000,
          createRetryIntervalMillis: 200,
          propagateCreateError: true,
          min: 2,
          max: 10,
          used: [],
          free: [],
          pendingCreates: [],
          pendingAcquires: [],
          destroyed: false,
          interval: null },
       valueForUndefined:
        Raw {
          client: [Circular],
          sql: 'DEFAULT',
          bindings: undefined,
          _wrappedBefore: undefined,
          _wrappedAfter: undefined,
          _debug: undefined },
       _events:
        [Object: null prototype] {
          start: [Function],
          query: [Function],
          'query-error': [Function],
          'query-response': [Function] },
       _eventsCount: 4,
       makeKnex: [Function: makeKnex] },
    and: [Circular],
    _single: { table: '"Poems"', only: false },
    _statements:
     [ { grouping: 'where',
         type: 'whereBasic',
         column: 'title',
         operator: '=',
         value: 'title1',
         not: false,
         bool: 'and' },
       { grouping: 'where',
         type: 'whereBasic',
         column: 'contents',
         operator: '=',
         value: 'title1',
         not: false,
         bool: 'or' },
       { grouping: 'where',
         type: 'whereBasic',
         column: 'year_written',
         operator: '=',
         value: 'title1',
         not: false,
         bool: 'or' },
       { grouping: 'where',
         type: 'whereBasic',
         column: 'year_published',
         operator: '=',
         value: 'title1',
         not: false,
         bool: 'or' } ],
    _method: 'select',
    _debug: undefined,
    _joinFlag: 'inner',
    _boolFlag: 'and',
    _notFlag: false }